# SOLVED = (tuple(range(8)), (0,) * 8, (0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5), tuple(range(24)))
# REALISTIC_SOLVED = (tuple(range(8)), (0,) * 8, tuple(range(24)), tuple(range(24)))
# F = ((4, 1, 2, 0, 7, 5, 6, 3), (1, 0, 0, 2, 2, 0, 0, 1), (3,0,1,2)+tuple(range(4,24)), (9, 8, 2, 3, 4, 5, 6, 7, 17, 16, 1, 0, 12, 13, 14, 15, 11, 10)+tuple(range(18, 24)))
# FP = ((3, 1, 2, 7, 0, 5, 6, 4), (1, 0, 0, 2, 2, 0, 0, 1), (1,2,3,0)+tuple(range(4,24)), (11, 10, 2, 3, 4, 5, 6, 7, 1, 0, 17, 16, 12, 13, 14, 15, 9, 8, 18, 19, 20, 21, 22, 23))
# F2 = ((7, 1, 2, 4, 3, 5, 6, 0), (0,)*8, (2,3,0,1)+tuple(range(4,24)), (16, 17, 2, 3, 4, 5, 6, 7, 10, 11, 8, 9, 12, 13, 14, 15, 0, 1, 18, 19, 20, 21, 22, 23))
# U = ((3,0,1,2,4,5,6,7), (0,) * 8, (0,1,2,3,7,4,5,6)+tuple(range(8,24)), (6,7,0,1,2,3,4,5)+tuple(range(8,24)))
# U2 = ((2, 3, 0, 1, 4, 5, 6, 7), (0,)*8, (0,1,2,3,6,7,4,5)+tuple(range(8,24)), (4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
# UP = ((1, 2, 3, 0, 4, 5, 6, 7), (0,)*8, (0,1,2,3,5,6,7,4)+tuple(range(8,24)), (2, 3, 4, 5, 6, 7, 0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
# REAL_D = ((0, 1, 2, 3, 5, 6, 7, 4), (0,) * 8, tuple(range(12))+(15,12,13,14)+tuple(range(16,24)), tuple(range(16))+tuple(range(18,24))+(16,17))
# REAL_D2 = ((0, 1, 2, 3, 6, 7, 4, 5), (0, 0, 0, 0, 0, 0, 0, 0), tuple(range(12))+(14,15,12,13)+tuple(range(16,24)), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 16, 17, 18, 19))
# REAL_DP = ((0, 1, 2, 3, 7, 4, 5, 6), (0, 0, 0, 0, 0, 0, 0, 0), tuple(range(12))+(13,14,15,12)+tuple(range(16,24)), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 23, 16, 17, 18, 19, 20, 21))
# R = ((0, 1, 3, 7, 4, 5, 2, 6), (0, 0, 2, 1, 0, 0, 1, 2), tuple(range(20))+(23,20,21,22), (0,1,2,3,4,5,10,11,8,9,22,23,12,13,6,7)+tuple(range(16,22))+(14,15))
# R2 = ((0, 1, 7, 6, 4, 5, 3, 2), (0,)*8, tuple(range(20))+(22,23,20,21), (0, 1, 2, 3, 4, 5, 22, 23, 8, 9, 14, 15, 12, 13, 10, 11, 16, 17, 18, 19, 20, 21, 6, 7))
# RP = ((0, 1, 6, 2, 4, 5, 7, 3), (0, 0, 2, 1, 0, 0, 1, 2), tuple(range(20))+(21,22,23,20), (0, 1, 2, 3, 4, 5, 14, 15, 8, 9, 6, 7, 12, 13, 22, 23, 16, 17, 18, 19, 20, 21, 10, 11))
# B = ((0, 2, 6, 3, 4, 1, 5, 7), (0, 2, 1, 0, 0, 1, 2, 0), (0,1,2,3,4,5,6,7,11,8,9,10)+tuple(range(12,24)), (0,1,2,3,15,14,6,7,8,9,10,11,5,4,21,20,16,17,18,19,13,12,22,23))
# B2 = ((0, 6, 5, 3, 4, 2, 1, 7), (0,)*8, (0,1,2,3,4,5,6,7,10,11,8,9)+tuple(range(12,24)), (0, 1, 2, 3, 20, 21, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 4, 5, 22, 23))
# BP = ((0, 5, 1, 3, 4, 6, 2, 7), (0, 2, 1, 0, 0, 1, 2, 0), (0,1,2,3,4,5,6,7,9,10,11,8)+tuple(range(12,24)), (0, 1, 2, 3, 13, 12, 6, 7, 8, 9, 10, 11, 21, 20, 5, 4, 16, 17, 18, 19, 15, 14, 22, 23))
# L = ((1, 5, 2, 3, 0, 4, 6, 7), (2, 1, 0, 0, 1, 2, 0, 0), tuple(range(16))+(19,16,17,18,20,21,22,23), (0,1,12,13,4,5,6,7,2,3,10,11,18,19,14,15,16,17,8,9,20,21,22,23))
# L2 = ((5, 4, 2, 3, 1, 0, 6, 7), (0,)*8, tuple(range(16))+(18,19,16,17,20,21,22,23), (0, 1, 18, 19, 4, 5, 6, 7, 12, 13, 10, 11, 8, 9, 14, 15, 16, 17, 2, 3, 20, 21, 22, 23))
# LP = ((4, 0, 2, 3, 5, 1, 6, 7), (2, 1, 0, 0, 1, 2, 0, 0), tuple(range(16))+(17,18,19,16,20,21,22,23), (0, 1, 8, 9, 4, 5, 6, 7, 18, 19, 10, 11, 2, 3, 14, 15, 16, 17, 12, 13, 20, 21, 22, 23))
# U_TRIPLE_WIDE = ((3,0,1,2,4,5,6,7), (0,) * 8, (20,21,22,23,7,4,5,6,16,17,18,19,12,13,14,15,0,1,2,3,8,9,10,11), (6,7,0,1,2,3,4,5,11,10,15,14,9,8,13,12)+tuple(range(16,24)))
# U2_TRIPLE_WIDE = ((2, 3, 0, 1, 4, 5, 6, 7), (0,)*8, (8,9,10,11,6,7,4,5,0,1,2,3,12,13,14,15,20,21,22,23,16,17,18,19), (4, 5, 6, 7, 0, 1, 2, 3, 14, 15, 12, 13, 10, 11, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23))
# UP_TRIPLE_WIDE = ((1, 2, 3, 0, 4, 5, 6, 7), (0,)*8, (16,17,18,19,5,6,7,4,20,21,22,23,12,13,14,15,8,9,10,11,0,1,2,3), (2, 3, 4, 5, 6, 7, 0, 1, 13, 12, 9, 8, 15, 14, 11, 10, 16, 17, 18, 19, 20, 21, 22, 23))
# F_WIDE = ((4, 1, 2, 0, 7, 5, 6, 3), (1, 0, 0, 2, 2, 0, 0, 1), (3, 0, 1, 2, 19, 5, 6, 18, 8, 9, 10, 11, 12, 20, 21, 15, 16, 17, 13, 14, 7, 4, 22, 23), (9, 8, 19, 3, 4, 5, 6, 2, 17, 16, 1, 0, 12, 13, 14, 15, 11, 10, 18, 22, 20, 21, 7, 23))
# F2_WIDE = ((7, 1, 2, 4, 3, 5, 6, 0), (0, 0, 0, 0, 0, 0, 0, 0), (2, 3, 0, 1, 14, 5, 6, 13, 8, 9, 10, 11, 12, 7, 4, 15, 16, 17, 20, 21, 18, 19, 22, 23), (16, 17, 22, 3, 4, 5, 6, 19, 10, 11, 8, 9, 12, 13, 14, 15, 0, 1, 18, 7, 20, 21, 2, 23))
# FP_WIDE = ((3, 1, 2, 7, 0, 5, 6, 4), (1, 0, 0, 2, 2, 0, 0, 1), (1, 2, 3, 0, 21, 5, 6, 20, 8, 9, 10, 11, 12, 18, 19, 15, 16, 17, 7, 4, 13, 14, 22, 23), (11, 10, 7, 3, 4, 5, 6, 22, 1, 0, 17, 16, 12, 13, 14, 15, 9, 8, 18, 2, 20, 21, 19, 23))
# U_WIDE = ((3, 0, 1, 2, 4, 5, 6, 7), (0, 0, 0, 0, 0, 0, 0, 0), (0, 21, 22, 3, 7, 4, 5, 6, 8, 17, 18, 11, 12, 13, 14, 15, 16, 1, 2, 19, 20, 9, 10, 23), (6, 7, 0, 1, 2, 3, 4, 5, 8, 10, 15, 11, 9, 13, 14, 12, 16, 17, 18, 19, 20, 21, 22, 23))
# U2_WIDE = ((2, 3, 0, 1, 4, 5, 6, 7), (0, 0, 0, 0, 0, 0, 0, 0), (0, 9, 10, 3, 6, 7, 4, 5, 8, 1, 2, 11, 12, 13, 14, 15, 16, 21, 22, 19, 20, 17, 18, 23), (4, 5, 6, 7, 0, 1, 2, 3, 8, 15, 12, 11, 10, 13, 14, 9, 16, 17, 18, 19, 20, 21, 22, 23))
# UP_WIDE = ((1, 2, 3, 0, 4, 5, 6, 7), (0, 0, 0, 0, 0, 0, 0, 0), (0, 17, 18, 3, 5, 6, 7, 4, 8, 21, 22, 11, 12, 13, 14, 15, 16, 9, 10, 19, 20, 1, 2, 23), (2, 3, 4, 5, 6, 7, 0, 1, 8, 12, 9, 11, 15, 13, 14, 10, 16, 17, 18, 19, 20, 21, 22, 23))
# R_WIDE = ((0, 1, 3, 7, 4, 5, 2, 6), (0, 0, 2, 1, 0, 0, 1, 2), (0, 1, 14, 15, 4, 5, 2, 3, 6, 7, 10, 11, 12, 13, 8, 9, 16, 17, 18, 19, 23, 20, 21, 22), (17, 1, 2, 3, 4, 0, 10, 11, 8, 9, 22, 23, 12, 13, 6, 7, 16, 20, 18, 19, 5, 21, 14, 15))
# R2_WIDE = ((0, 1, 7, 6, 4, 5, 3, 2), (0, 0, 0, 0, 0, 0, 0, 0), (0, 1, 8, 9, 4, 5, 14, 15, 2, 3, 10, 11, 12, 13, 6, 7, 16, 17, 18, 19, 22, 23, 20, 21), (20, 1, 2, 3, 4, 17, 22, 23, 8, 9, 14, 15, 12, 13, 10, 11, 16, 5, 18, 19, 0, 21, 6, 7))
# RP_WIDE = ((0, 1, 6, 2, 4, 5, 7, 3), (0, 0, 2, 1, 0, 0, 1, 2), (0, 1, 6, 7, 4, 5, 8, 9, 14, 15, 10, 11, 12, 13, 2, 3, 16, 17, 18, 19, 21, 22, 23, 20), (5, 1, 2, 3, 4, 20, 14, 15, 8, 9, 6, 7, 12, 13, 22, 23, 16, 0, 18, 19, 17, 21, 10, 11))
# BACK_B = (tuple(range(8)), (0,)*8, (0,1,2,3,4,16,17,7,8,9,10,11,23,13,14,22,15,12,18,19,20,21,5,6), (0,1,2,18,4,5,3,7,8,9,10,11,12,13,14,15,16,17,23,19,20,21,22,6))
# BACK_D = (tuple(range(8)), (0,)*8, (20,1,2,23,4,5,6,7,16,9,10,19,12,13,14,15,0,17,18,3,8,21,22,11), (0,1,2,3,4,5,6,7,11,9,10,14,12,8,13,15,16,17,18,19,20,21,22,23))
# BACK_L = (tuple(range(8)), (0,)*8, (12,13,2,3,0,1,6,7,8,9,4,5,10,11,14,15,16,17,18,19,20,21,22,23), (0,16,2,3,1,5,6,7,8,9,10,11,12,13,14,15,21,17,18,19,20,4,22,23))
# VALID_MOVES = {"F": F, "U": U, "D": U_TRIPLE_WIDE, "R": R, "B": B, "L": L, "F'": FP, "F2": F2, "U2": U2, "U'": UP, "R2": R2, "R'": RP, "B2": B2, "B'": BP, "L'": LP, "L2": L2, "D'": UP_TRIPLE_WIDE, "D2": U2_TRIPLE_WIDE, "Fw": F_WIDE, "Fw2": F2_WIDE, "Fw'": FP_WIDE, "Rw": R_WIDE, "Rw2": R2_WIDE, "Rw'": RP_WIDE, "Uw": U_WIDE, "Uw2": U2_WIDE, "Uw'": UP_WIDE}
# ALL_VALID_MOVES = VALID_MOVES | {"4": REAL_D, "42": REAL_D2, "4'": REAL_DP, "b": BACK_B, "d": BACK_D, "l": BACK_L}
# OUTER_MOVES = ("U'", "F", "F'", "F2", "U", "U2", "B", "B'", "B2", "D", "D'", "D2", "L", "L'", "L2", "R", "R'", "R2")
# WIDE_MOVES = ("Uw", "Uw2", "Uw'", "Rw", "Rw2", "Rw'", "Fw", "Fw2", "Fw'")
# END_CHARACTERS = ("", "2", "'")
#
# EDGE_REPLACEMENT = ((("R", "U'", "R'"), ("F", "R'", "F'", "R")), (("R", "U2", "R'"), ("F'", "U'", "F")), (("R", "U", "R'"), ("F'", "U2", "F")), (("U", "R", "U'", "R'"), ("F'", "U", "F")), ((), ("L'", "F", "U'", "L", "F'")), ((), ("R", "F'", "U", "R'", "F")), None, None, (("R'", "4", "R"), ("F'", "R", "F", "R'")), (("R'", "42", "R"), ("F", "4", "F'")), (("R'", "4'", "R"), ("F", "42", "F'")), (("4'", "R'", "4", "R"), ("F", "4'", "F'")))
# BUFFER_ROTATIONS = ((("z",), ("y'", "z"), ("y2", "z"), ("y", "z"), ("y'",), ("",), ("y2",), ("y",), ("z'",), ("y'", "z'"), ("y2", "z'"), ("y", "z'")), {"E": ("",), "M": ("z'",), "S": ("x",)})
# LAST_2_EDGE_MOVES = ({5: (), 6: ("B2", "R2"), 7: ("R2",)}, {4: (), 6: ("L2",), 7: ("B2", "L2")})
# ROTATION_MOVES = {"": tuple(range(6)), "x": (3,0,1,2,4,5), "x2": (2,3,0,1,4,5), "x'": (1,2,3,0,4,5), "y": (5,1,4,3,0,2), "y2": (2,1,0,3,5,4), "y'": (4,1,5,3,2,0), "z": (0,4,2,5,3,1), "z2": (0,3,2,1,5,4), "z'": (0,5,2,4,1,3)}
# ROTATION_DICT = {"y": ("FLBR", "UD"), "y'": ("FRBL", "UD"), "x": ("FUBD", "LR"), "x'": ("FDBU", "LR"), "z": ("URDL", "FB"), "z'": ("ULDR", "FB")}
# INTERSECTING_MOVES = ({"F", "F2", "F'"},  {"U", "U2", "U'"}, {"B", "B2", "B'"}, {"D", "D2", "D'"}, {"L", "L2", "L'"}, {"R", "R2", "R'"}, {"Fw", "Fw2", "Fw'"}, {"Uw", "Uw2", "Uw'"}, {"Rw", "Rw2", "Rw'"})
# DICT_INTERSECTING_MOVES = {None: set(), 'F': {'F', 'F2', "F'"}, 'F2': {'F', 'F2', "F'"}, "F'": {'F', 'F2', "F'"}, "U'": {"U'", 'U', 'U2'}, 'U': {"U'", 'U', 'U2'}, 'U2': {"U'", 'U', 'U2'}, "B'": {"B'", 'B', 'B2'}, 'B': {"B'", 'B', 'B2'}, 'B2': {"B'", 'B', 'B2'}, 'D': {'D', "D'", 'D2'}, "D'": {'D', "D'", 'D2'}, 'D2': {'D', "D'", 'D2'}, "L'": {"L'", 'L2', 'L'}, 'L2': {"L'", 'L2', 'L'}, 'L': {"L'", 'L2', 'L'}, 'R': {'R', 'R2', "R'"}, 'R2': {'R', 'R2', "R'"}, "R'": {'R', 'R2', "R'"}, "Fw'": {"Fw'", 'Fw2', 'Fw'}, 'Fw2': {"Fw'", 'Fw2', 'Fw'}, 'Fw': {"Fw'", 'Fw2', 'Fw'}, "Uw'": {"Uw'", 'Uw2', 'Uw'}, 'Uw2': {"Uw'", 'Uw2', 'Uw'}, 'Uw': {"Uw'", 'Uw2', 'Uw'}, 'Rw2': {'Rw2', "Rw'", 'Rw'}, "Rw'": {'Rw2', "Rw'", 'Rw'}, 'Rw': {'Rw2', "Rw'", 'Rw'}}
# WING_ROTATION = {"z": ((7,2,19,22),(6,3,18,23)), "y": ((10,15,12,9),(11,14,13,8)), "x": ((0,17,20,5),(1,16,21,4))}
# PARITIES = ((), ("Uw2", "Rw2", "U2", "R2", "Rw2", "U2", "Rw2", "Uw2"), ("Rw'", 'U2', 'Rw', 'U2', 'Rw', 'U2', "Rw2", 'F2', "Rw'", 'U2', "Rw'", 'U2', 'F2', 'Rw2', "F2"), ('Rw2', 'B2', "Rw'", 'U2', "Rw'", 'U2', 'B2', "Rw'", 'B2', 'Rw', 'B2', "Rw'", 'B2', 'Rw2', 'B2'))
# PARITY_MESSAGES = {(): "No parity", PARITIES[1]: "PLL parity; +8 moves", PARITIES[2]: "OLL parity; +15 moves", PARITIES[3]: "OLL and PLL parity; +15 moves"}
# CENTER_COLORS = "GWBYOR"
# COLOR_NAMES = {"G": "Green", "W": "White", "B": "Blue", "Y": "Yellow", "O": "Orange", "R": "Red"}
# CORNER_COLORS = ("WGO", "WOB", "WBR", "WRG", "YOG", "YBO", "YRB", "YGR")
# WING_COLORS = ("WG","GW","WO","OW","WB","BW","WR","RW","GO","OG","GR","RG","BO","OB","BR","RB","YG","GY","YO","OY","YB","BY","YR","RY")
# END_STATES = (
#     (("",)*8, ("",)*8, (("",)*4)+(1,1,1,1)+(("",)*4)+(3,3,3,3)+("",)*8, ("",)*24),
#     (("",)*8, ("",)*8, (0,0,0,0,1,1,1,1)+(("",)*4)+(3,3,3,3)+("",)*8, ("",)*24),
#     (("",)*8, ("",)*8, (0,0,0,0,1,1,1,1)+(("",)*4)+(3,3,3,3,4,4,4,4)+("",)*4, ("",)*24),
#     (("",)*8, ("",)*8, SOLVED[2], ("",)*24)
# )
# EVERYTHING = (ALL_VALID_MOVES, B, B2, BACK_B, BACK_D, BACK_L, BP, BUFFER_ROTATIONS, CENTER_COLORS, COLOR_NAMES, CORNER_COLORS, DICT_INTERSECTING_MOVES, EDGE_REPLACEMENT, END_CHARACTERS, END_STATES, F, F2, F2_WIDE, FP, FP_WIDE, F_WIDE, INTERSECTING_MOVES, L, L2, LAST_2_EDGE_MOVES, LP, OUTER_MOVES, PARITIES, PARITY_MESSAGES, R, R2, R2_WIDE, REALISTIC_SOLVED, REAL_D, REAL_D2, REAL_DP, ROTATION_DICT, ROTATION_MOVES, RP, RP_WIDE, R_WIDE, SOLVED, U, U2, U2_TRIPLE_WIDE, U2_WIDE, UP, UP_TRIPLE_WIDE, UP_WIDE, U_TRIPLE_WIDE, U_WIDE, VALID_MOVES, WIDE_MOVES, WING_COLORS, WING_ROTATION)
#
# with open("4x4_CONSTANTS.txt", "wb") as f:
#     pickle.dump(EVERYTHING, f)

import pickle
from os import chdir

chdir("/Users/owenreiss/Desktop/Coding/python")
with open("4x4_CONSTANTS.txt", "rb") as f:
    ALL_VALID_MOVES, B, B2, BACK_B, BACK_D, BACK_L, BP, BUFFER_ROTATIONS, CENTER_COLORS, COLOR_NAMES, CORNER_COLORS, DICT_INTERSECTING_MOVES, EDGE_REPLACEMENT, END_CHARACTERS, END_STATES, F, F2, F2_WIDE, FP, FP_WIDE, F_WIDE, INTERSECTING_MOVES, L, L2, LAST_2_EDGE_MOVES, LP, OUTER_MOVES, PARITIES, PARITY_MESSAGES, R, R2, R2_WIDE, REALISTIC_SOLVED, REAL_D, REAL_D2, REAL_DP, ROTATION_DICT, ROTATION_MOVES, RP, RP_WIDE, R_WIDE, SOLVED, U, U2, U2_TRIPLE_WIDE, U2_WIDE, UP, UP_TRIPLE_WIDE, UP_WIDE, U_TRIPLE_WIDE, U_WIDE, VALID_MOVES, WIDE_MOVES, WING_COLORS, WING_ROTATION = pickle.load(f)

del f, chdir, pickle